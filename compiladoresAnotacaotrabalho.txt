Endereço Relativo das variaveis locais e parametros

CRVL n
ARZL n
CREL n
CRVI n
ARMI n
ENSP
RTPS n

Registrador d aponta exatamente onde está a posição da primeira variavel local 
	declarada 



1 - Modificar a tabela de simbolos adicionando "cat" e "tam" e mante-los para a tradução de forma correta tempo: 18:59

2 - Mudar Atribuição, leitura e distinguir entre variavel simples e composta
	- Leitura : leia A[x+1] vetor + posição sendo posição pode ser uma expressão
	- Atribuição : A[i] <- valor em uma posição
	- Elemento do vetor pode aparecer em uma expressão: soma <- 10 * A[i + 1]

3 - Modificar o Lexico para adicionar novos Tokens: Colchetes

4 - 2 Instruções de maquina: 
			ARZV n (endereço na memoria)
	Regra:
	M[n + M[s - 1]] <- M[s]
	s <- s - 2

	Explicação:
	
n + M[s - 1] : 
		n = indica onde o vetor existe na memoria
		M[s - 1] = a partir da posição n em qual deslocamento está o valor
DUVIDA DO VIDEO: tempo: 20:45 (explicar melhor)
		"deslocamento vai ta na pilha"		


na pilha de execução tem que ter:
	no topo da pilha -1: a posição onde o valor deve ser colocado.
	no topo da pilha: o valor que deve ser colocado no vetor n.

		Ou seja, 2 valores na pilha, a posição e o valor

s decrementa duas posições na pilha 


Comparando ARZV e ARZV n (vetor)
	
	ARZV simples:
		tem apenas o valor a ser guardado em uma variavel

	ARZV no vetor:
		na pilha de execução tera o indice e o valor 
		quando desempilha tira os dois valores da pilha e muda na memoria o indice do vetor e coloca o valor naquela posição.



	CRVV n - carrega valor de vetor
 
	n : endereco do vetor, ou seja, o deslocamento ou a posição

	a posicao do elemento que eu quero colocar no topo da pilha vai ta no topo da pilha e ai vai trocar a posicao pelo valor que esta naquela posicao
		trocar a posicao pelo valor que esta na posicao








Semantico : 
	LEITURA:

	leia <nomevetor>[<expressao>]
		Tradução da Expressão   //topo da pilha -1 : posicao - topo : valor lido
		LEIA
		ARZV <endereço do vetor>

	ATRIBUICAO:

	<nomevetor>[<expressao1>] <- expressao2
	traducao da expressao1	// expressao da posicao onde o valor vai ser guardado (topo - 1)
	traducao da expressao2	// expressao do valor a ser guardado (topo)
	ARZV <endereco do vetor>


	EXPRESSAO:

	<nomevetor>[<expressao>]
		Tradução da Expressao	// deslocamento = posicao
		CRVV <endereco do vetor>


Compatibilidade de tipo
	tipo do vetor a esquerda deve ser igual ao valor da expressao a direita 	
		Ex: inteiro A[2] <- 2 + 2
	deslocamento ou posição:
		expressao do indice deve ser inteiro
			Ex: A[2+2]  não A[2>2]



Cabeçalho e makefile deve ser o padrão proposto
	adicionar comentarios em todos os arquivos
	utilizar makefile proposto



Duvidas

	No trabalho pede-se para finalizar com DMEM.
	No video o DMEM é abandonado.

	Como o exemplo exposto no video e nos exemplos a utilização de AMEM no inicio da compilação não usa T_NUMERO nem <expr> (chega-se a essa conclusão pois não é utilizado CRCT x com o valor colocado entre "[" e "]" concluo com isso que o vetor nao está contido na declaração de variaveis, portando deve-se criar um novo ramo na arvore de derivação que trate do vetor, isso causa um problema, ao utilizar T_NUMERO do ramo TERMO, o mesmo adiciona CRCT com o valor mas isso não é feito na DECLARAÇÃO, aproveito para perguntar, a declaração de um vetor só é possivel da forma <tipo><NOMEvetor"["INDICE"]"> lista_variaveis ? ou pode-se declarar em qualquer posição após TIPO.


	Na aula 34 também é abandonado DMEM na tradução de rotinas.

	Quando pede-se para fazer as traduções de utilização do vetor na atribuição e em uma expressao é pedido <expressao-1> e <expressao-2> e <<expressao>, disto surge a duvida: as expressoes[0-1-2] casam com expr? Se sim, faz-se necessário tratar quando essas expressoes são de tipo logico? Existe forma de tratar esse problema? Caso não case com <expr> então deve-se repetir as declaracoes de operacoes aritimeticas apenas, numa regra nova "INDICE" ?

	Até aqui eu consigo traduzir os vetores e variaveis unicas, porem escrevendo na mvs o CRVG com o valor 'INDICE', apos vetores é aceito as outras variaveis de mesmo tipo também.



	INPP
	AMEN	101
	LEIA
	ARZG	100
	CRVG	100
	CRCT	1000
	ARZG 	105
	CRCT	0
	ARZG 	105
	DMEN	100
	FIMP



Quando você escreve uma regra recursiva, você pode colocar a referência recursiva na extremidade esquerda ou na extremidade direita do lado direito da regra, por exemplo: txprlist: exprlist I,' expr ; /* recursão à esquerda */ exprlist: expr I,' exprlist ; /* recursão à direita */ Na maioria dos casos você pode escrever a gramática de qualquer maneira. O Yacc lida com a recursão à esquerda com muito mais eficiência do que a recursão à direita. Isso ocorre porque sua pilha interna acompanha todos os símbolos vistos até agora para todas as regras parcialmente analisadas. Se você usar a versão recursiva correta de exprlist e tiver uma expressão com dez expressões, quando a décima expressão for lida, haverá 20 entradas na pilha, uma expr e uma vírgula para cada uma das dez expressões. Quando a lista terminar, todas as exprlists aninhadas serão reduzidas, começando da direita para a esquerda. Por outro lado, se você usar a versão recursiva à esquerda, a regra exprlist é reduzida após cada expr, então a lista nunca terá mais de três entradas na pilha interna. (PAG 197 YACC OREIILY)